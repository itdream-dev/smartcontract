{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xaA503BCFaA5388dAa6649161581332EdaA5e794f",
    "txHash": "0xaff4e759ab7c669ae47c243f66f2580a5659b2c2f3aa2b7f7ff460a78eecb485"
  },
  "proxies": [
    {
      "address": "0x89feBD4c01d13ff6D5Ae5248d27d81a75c0491b2",
      "txHash": "0x0630399b9ab649c1a53942b871e095440e663375146d12c98d2989c09432d4cb",
      "kind": "transparent"
    },
    {
      "address": "0x43a8eb24246c0c279AFd81066cb09Cb77EE6d74F",
      "txHash": "0xac6ad1f6213722f401c91d9e4d9efa007a10f2d3244a6e13bf700c47d81f7364",
      "kind": "transparent"
    },
    {
      "address": "0xbCe1783109ca4B58833329Cd9a59Bb330F1B3296",
      "txHash": "0x05eaacd280ebeedafcdf4a27c4efa6ecf1823e9ee08259db43285ba144e9d11d",
      "kind": "transparent"
    },
    {
      "address": "0x092486340407eF2a1aeBEb7d7C74A0a7F042e0Cd",
      "txHash": "0x7f52c77f462dddf85d3c0c3c75b250c87ebbff77894494851d7eb857eb627ccd",
      "kind": "transparent"
    },
    {
      "address": "0xe65e5AAa8E38462953F41BB268F2ca2BCccf461c",
      "txHash": "0xa109b976f24c8b44e0195a28c57c3f1e75d1ceb018bc453a5e226a12b01bd354",
      "kind": "transparent"
    },
    {
      "address": "0xF9e4f389321a9e7928EC716E3c3ac523CEc40Fbd",
      "txHash": "0x425fe0f8fa26fb021ab2b768b13f767573f88c49919b11840b7f7abb10ba8419",
      "kind": "transparent"
    },
    {
      "address": "0x387BcB89a9365566e2d70e7fB59F51A929318273",
      "txHash": "0xd938ab93edb5f35b60ab2bb14ede33c2d96838ddc893339bff1b755cf38b16da",
      "kind": "transparent"
    },
    {
      "address": "0x2A0906Ce6bF8A325eE9C2E1fcd67C36a282e0f97",
      "txHash": "0x232f0ef216d172dafeb4c4369cb9d8591ac55232ccd4f28aa367e4e7b78160c5",
      "kind": "transparent"
    },
    {
      "address": "0xC665705d55def8ceA724818EA2077BD50bD9CF7b",
      "txHash": "0x016da5da404046884f804058587db273482dd96806b050fffbd4d26ee8aeee84",
      "kind": "transparent"
    },
    {
      "address": "0x8E84f74289419def3CE022060F68C1a51D45B3BC",
      "txHash": "0x819963813e63aad31375e126e2b3c4970e75f32587a11ea8660ce6dc58db3627",
      "kind": "transparent"
    },
    {
      "address": "0x8f0483125FCb9aaAEFA9209D8E9d7b9C8B9Fb90F",
      "txHash": "0xa670d9cc460d065d6ca3703a5e6c0e2f740d2ba5a234147ca835dfdd51680ab0",
      "kind": "transparent"
    },
    {
      "address": "0x0a355d114F94dFC7099333dE6de2ffC329cC366a",
      "txHash": "0x33d16e18c191404c6277a6095ffbf4ab296627b2cf39bdf116fb6ea637a3cd39",
      "kind": "transparent"
    },
    {
      "address": "0x9A6EbbB24D662557FCd965618b27fDc8188331Cb",
      "txHash": "0x8d3ad09ac83c9769168049906447503490c33705fedaaaf94a550041182f8f53",
      "kind": "transparent"
    },
    {
      "address": "0x8c9098822E0Ad0a258598bd26c6Fe6B8cDA1d8bE",
      "txHash": "0x72db3344e73bf03a9d2c6691bbf49ad371abe9a8fda5f888ed0678a4abb43306",
      "kind": "transparent"
    },
    {
      "address": "0x2A90147BF1eB707321BcBa0F39b2D7e3768968c7",
      "txHash": "0x65ba5ef58d144aa7da5d95ac0fc4e5255646d6c80b0c47863157303260a2ed92",
      "kind": "transparent"
    },
    {
      "address": "0x615549471436156F9F906E2A30738983F24E2d74",
      "txHash": "0x050013bb8831951c83f45dffb11801de804a3e551d387d96f6924c0aef9a514c",
      "kind": "transparent"
    },
    {
      "address": "0x7873f5a4C512f9798d57f0222DFCda3392b3E51a",
      "txHash": "0x39760820150c6308402f09de22d51aecdcefc69da30b80af2f7f5a68be6f0917",
      "kind": "transparent"
    },
    {
      "address": "0xaA503BCFaA5388dAa6649161581332EdaA5e794f",
      "txHash": "0x74355173d65c3ad4338139701b91958821ac5864a1db74e5455d8c1d56eb0eca",
      "kind": "transparent"
    },
    {
      "address": "0x2A616de1dF3b328DdfB3DaA226b79F0d895621b2",
      "txHash": "0xd1e5e61f0f5ef50da425762720199e5dff05fb3fe4f4a17df86056795196aad5",
      "kind": "transparent"
    },
    {
      "address": "0x84e59189B4c7d391B33013a8631d14391Fa0EefF",
      "txHash": "0xb212703719c20bf1ccff0a1d67dc6c9a090d87d577202f817d696d83693ac27f",
      "kind": "transparent"
    },
    {
      "address": "0x846284843e7A0C330410202062e7b06Eb5fF8f44",
      "txHash": "0xcb7a9901692b9c9c48faa1c9ba0116ce9c40a6cf8bbfcaa20fb0163e744bef2c",
      "kind": "transparent"
    },
    {
      "address": "0x15DCDde30DD4dff14B9aDFF0d1c4da2319ED8aB3",
      "txHash": "0x84ba80d3eeb406a922f8aa9fba9b23db826c0070c0133245b60f496cf809e5b9",
      "kind": "transparent"
    },
    {
      "address": "0x6B170f1Db0B3eC10DE49900cc9e56887752De1e1",
      "txHash": "0x36c26efe9d9b937b2e5ca9726a3ffd27ccc03648fded680cfebb30a52684c086",
      "kind": "transparent"
    },
    {
      "address": "0x8380a8fdA09A163543f04FA68f4927EEd8FFbf09",
      "txHash": "0x9d79e2c78a9104a70b3d878002848bfa8dd0a23a075f24d106b4f72a2631e2bc",
      "kind": "transparent"
    },
    {
      "address": "0xc9c3d3578ec8703a276A3E06775A6BcB6a4DB085",
      "txHash": "0x0a205c694a868fbc4e98c5e975e5dce46e27404c7eda625faf62b235ca6d6b35",
      "kind": "transparent"
    },
    {
      "address": "0x11039B28CFbFbf33C4bD60EC0460575Be006018f",
      "txHash": "0x2c6a5f8bc098aec3fe149cb6d39f3a094c054c15ed3d07247ac547a8fce1cd23",
      "kind": "transparent"
    },
    {
      "address": "0x638583Eae7197a4D5cb2833B3c5556732eD09E49",
      "txHash": "0x9d23ea471c1f9a4dfbb9c7bd64d5d79f5cfc05675c260ea0468d3c8b553046c4",
      "kind": "transparent"
    },
    {
      "address": "0x0b9887B8d5281C457e7EfD492A951Ea0C9Be5ed4",
      "txHash": "0xacecde80ac6c2e3fd30933c184a1a0252afb4f1a3f6fbdb3e908b595be71ba08",
      "kind": "transparent"
    },
    {
      "address": "0xd398A9390C3D35825dA3ACa114e8c387DDef5ecB",
      "txHash": "0x6039a81b57f047bad9d384b2df5c43c53588496c31bbd835a65a4b6457398fec",
      "kind": "transparent"
    },
    {
      "address": "0x0991a42679185701c863736793C4bDa76209d143",
      "txHash": "0x355ff790cc4973d56e1b6bd0279050257e49b13540dc86f6dbe8aa4a9d9a5731",
      "kind": "transparent"
    },
    {
      "address": "0x345cA3e014Aaf5dcA488057592ee47305D9B3e10",
      "txHash": "0x9af6b706b73136963c431b469600bf55a4db454ea12a3e9d525c754d754b5028",
      "kind": "transparent"
    },
    {
      "address": "0x711fF5E5843efB406FDb1fd8fe0F01beEb254ee8",
      "txHash": "0x09004c4feb6b83e7f69fbba71f0dc6a54c5c6be2e13ec51eddc303d5899e5bec",
      "kind": "transparent"
    },
    {
      "address": "0x854Aeba4b5CB1e84AD32a84B77c82e82E23f3C13",
      "txHash": "0xd856f134e435b77790030e7b1d723e5e87deecb5c9ec1cf0898c072f41d73899",
      "kind": "transparent"
    },
    {
      "address": "0xc34ddB0fDdACEDfE602b4344F6e36393a45D0F9D",
      "txHash": "0x74aa62e613ffd4ba14a271cab43b601e0f133378b239de1a1a5248dcc22184cb",
      "kind": "transparent"
    },
    {
      "address": "0xf8f3bc18bee85D3459ca2dB6505C599F60939e62",
      "txHash": "0x2725356add3df7b8314fbba52568408efb0b45e219f3a91319694c9fa2a22764",
      "kind": "transparent"
    }
  ],
  "impls": {
    "0214c29df0da09be0c90f72a795728fcaf6b56dc3e8039d52677ad345a1a966f": {
      "address": "0x207Db055A0B361d6FF8658752682b20617D56174",
      "txHash": "0x4f26bafb0248d3ba1e607571b895d30d7b6142b92ff0f1a8d86bdc4812cd1977",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/OrderValidator.sol:45"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "TransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../project:/contracts/TransferManager.sol:18"
          },
          {
            "contract": "TransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../project:/contracts/TransferManager.sol:20"
          },
          {
            "contract": "TransferManager",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../project:/contracts/TransferManager.sol:21"
          },
          {
            "contract": "TransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../project:/contracts/TransferManager.sol:61"
          },
          {
            "contract": "MarketCore",
            "label": "orderState",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/MarketCore.sol:16"
          },
          {
            "contract": "MarketCore",
            "label": "_signer",
            "type": "t_address",
            "src": "../project:/contracts/MarketCore.sol:23"
          },
          {
            "contract": "MarketCore",
            "label": "_maker",
            "type": "t_address",
            "src": "../project:/contracts/MarketCore.sol:24"
          },
          {
            "contract": "MarketCore",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/MarketCore.sol:148"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d7fcee4e9a3e1d3550ebe9c7868f8ed94c1138c7fa4b584b6c49f82ec6c95ccc": {
      "address": "0xc87877702be56210ed8645a6A4E35D4633f6B20A",
      "txHash": "0x4e87a39eb55e6d4db5bd200d32c585ac6f6aef35485824a35bbc60207d062bdb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/OrderValidator.sol:45"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "TransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../project:/contracts/TransferManager.sol:18"
          },
          {
            "contract": "TransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../project:/contracts/TransferManager.sol:20"
          },
          {
            "contract": "TransferManager",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../project:/contracts/TransferManager.sol:21"
          },
          {
            "contract": "TransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../project:/contracts/TransferManager.sol:74"
          },
          {
            "contract": "MarketCore",
            "label": "orderState",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/MarketCore.sol:16"
          },
          {
            "contract": "MarketCore",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/MarketCore.sol:164"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "b4200a5c3b9170c108df90021356b2bad3530e3284afa1e8e1a456e2b77d2141": {
      "address": "0x8c9098822E0Ad0a258598bd26c6Fe6B8cDA1d8bE",
      "txHash": "0xf8d1de2a9deded707f2ffc137c3a6c6e6d1dc3dfcbc68f3b022f60d7da258355",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/OrderValidator.sol:45"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "TransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../project:/contracts/TransferManager.sol:20"
          },
          {
            "contract": "TransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../project:/contracts/TransferManager.sol:21"
          },
          {
            "contract": "TransferManager",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../project:/contracts/TransferManager.sol:22"
          },
          {
            "contract": "TransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../project:/contracts/TransferManager.sol:91"
          },
          {
            "contract": "MarketCore",
            "label": "orderState",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/MarketCore.sol:16"
          },
          {
            "contract": "MarketCore",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/MarketCore.sol:126"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "157445070630e4b851b1751f09e8f339320630a3a0969c324a13c56a8bb0cdd8": {
      "address": "0xf79A52F50d3abF4ff33F03B93e208C4d05685357",
      "txHash": "0x356c15e180fff2b00f0cc6093998a9d2f803e8c42ccf8be2508b51c9609edc93",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)3148_storage)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2525_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:92"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:494"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/test/nfts/ERC721DefaultApproval.sol:7"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721DefaultApproval.sol:23"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271ValidatorForERC721",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/Mint721Validator.sol:24"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/Mint721Validator.sol:35"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:21"
          },
          {
            "contract": "ERC721Lazy",
            "label": "royaltyFees",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:22"
          },
          {
            "contract": "ERC721Lazy",
            "label": "metasaltToken",
            "type": "t_address",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:23"
          },
          {
            "contract": "ERC721Lazy",
            "label": "MetasaltTokenCreateRewardValue",
            "type": "t_uint256",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:24"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:122"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721Base.sol:26"
          },
          {
            "contract": "ERC721MetaSalt",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721MetaSalt.sol:25"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)3148_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)3148_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2762_storage"
              }
            ]
          },
          "t_struct(Set)2762_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2525_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)2207_storage"
              }
            ]
          },
          "t_struct(Map)2207_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)2199_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)2199_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)2199_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "b3f6b4f931c260ce1f4cd76311a50f359826eaa424dfb5bd22532454a3e2e16a": {
      "address": "0x84e59189B4c7d391B33013a8631d14391Fa0EefF",
      "txHash": "0xad43eb379caa5481356d4ca78bbae586ce560b4a31a5e880647348bde9213aea",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155BaseURI.sol:14"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155BaseURI.sol:69"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1271/ERC1271Validator.sol:25"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155DefaultApproval.sol:8"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155DefaultApproval.sol:20"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155BurnableUpgradeable.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:20"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "royaltyFees",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:21"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:22"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:23"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "metasaltToken",
            "type": "t_address",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:24"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "MetasaltTokenCreateRewardValue",
            "type": "t_uint256",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:25"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:149"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Base.sol:12"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Base.sol:81"
          },
          {
            "contract": "ERC1155MetaSalt",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155MetaSalt.sol:24"
          }
        ],
        "types": {
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "5431bc65cc74f900c32b2dedd104503bc31d4a8394c541c005dca6486688c5ac": {
      "address": "0x79Fc726f738fd4F856a79aD3e7b353Fa2749C9cf",
      "txHash": "0xc19009a3666d20b95087212e7e38b94ce02cd2251d52bd544471234308aae072",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "MetaSaltToken",
            "label": "erc721Contract",
            "type": "t_address",
            "src": "../project:/contracts/test/MetaSaltToken.sol:13"
          },
          {
            "contract": "MetaSaltToken",
            "label": "erc1155Contract",
            "type": "t_address",
            "src": "../project:/contracts/test/MetaSaltToken.sol:14"
          },
          {
            "contract": "MetaSaltToken",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "../project:/contracts/test/MetaSaltToken.sol:15"
          },
          {
            "contract": "MetaSaltToken",
            "label": "airdropAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/test/MetaSaltToken.sol:16"
          },
          {
            "contract": "MetaSaltToken",
            "label": "airdropVersion",
            "type": "t_uint256",
            "src": "../project:/contracts/test/MetaSaltToken.sol:17"
          },
          {
            "contract": "MetaSaltToken",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/test/MetaSaltToken.sol:18"
          },
          {
            "contract": "MetaSaltToken",
            "label": "airdrops",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../project:/contracts/test/MetaSaltToken.sol:19"
          },
          {
            "contract": "MetaSaltToken",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/MetaSaltToken.sol:102"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "8384cc820a7628a098dd7c62f419be77f2ae763fe6eaee5bfad57d7f3a40ba2f": {
      "address": "0xbf93873DC45886170d776bfC8f23B27c224d8614",
      "txHash": "0x1653d89ce05d9e1107e567b5062e5494c07767383267e56276766bb43f404ab3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)3148_storage)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2525_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:92"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:494"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/test/nfts/ERC721DefaultApproval.sol:7"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721DefaultApproval.sol:23"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271ValidatorForERC721",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/Mint721Validator.sol:24"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/Mint721Validator.sol:35"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Lazy",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyReceiver)6535_storage)",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:26"
          },
          {
            "contract": "ERC721Lazy",
            "label": "metasaltToken",
            "type": "t_address",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:27"
          },
          {
            "contract": "ERC721Lazy",
            "label": "MetasaltTokenCreateRewardValue",
            "type": "t_uint256",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:28"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:126"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721Base.sol:26"
          },
          {
            "contract": "ERC721MetaSalt",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721MetaSalt.sol:25"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyReceiver)6535_storage)": {
            "label": "mapping(uint256 => struct ERC721Lazy.RoyaltyReceiver)"
          },
          "t_struct(RoyaltyReceiver)6535_storage": {
            "label": "struct ERC721Lazy.RoyaltyReceiver",
            "members": [
              {
                "label": "creator",
                "type": "t_address"
              },
              {
                "label": "royaltyPercent",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)3148_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)3148_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2762_storage"
              }
            ]
          },
          "t_struct(Set)2762_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2525_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)2207_storage"
              }
            ]
          },
          "t_struct(Map)2207_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)2199_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)2199_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)2199_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "52e183fd3f1397ca7514ed1e624c900d4450aa98c934421f7a052957bf4cefef": {
      "address": "0x854Aeba4b5CB1e84AD32a84B77c82e82E23f3C13",
      "txHash": "0x1fafa0be1e2b800d553df90b90519bc8efacb31691e199bdf34e5f3a32996ecb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155BaseURI.sol:14"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155BaseURI.sol:69"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1271/ERC1271Validator.sol:25"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155DefaultApproval.sol:8"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155DefaultApproval.sol:20"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155BurnableUpgradeable.sol:41"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyReceiver)8920_storage)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:25"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:27"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:28"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "metasaltToken",
            "type": "t_address",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:29"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "MetasaltTokenCreateRewardValue",
            "type": "t_uint256",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:30"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Lazy.sol:154"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Base.sol:12"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155Base.sol:81"
          },
          {
            "contract": "ERC1155MetaSalt",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/test/nfts/erc-1155/ERC1155MetaSalt.sol:24"
          }
        ],
        "types": {
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyReceiver)8920_storage)": {
            "label": "mapping(uint256 => struct ERC1155Lazy.RoyaltyReceiver)"
          },
          "t_struct(RoyaltyReceiver)8920_storage": {
            "label": "struct ERC1155Lazy.RoyaltyReceiver",
            "members": [
              {
                "label": "creator",
                "type": "t_address"
              },
              {
                "label": "royaltyPercent",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "38137529211e3b30423ff085025c2cdae9679f2a931a63b8e72665e650f7547b": {
      "address": "0xF733E6632161618761f2a17345420fC0AA5DF7D8",
      "txHash": "0xb5624e4d338747e7a257baaeb6af7d458cce93e9974495b6a5cfa3a3593f4475",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "MetaSaltToken",
            "label": "erc721Contract",
            "type": "t_address",
            "src": "../project:/contracts/test/MetaSaltToken.sol:13"
          },
          {
            "contract": "MetaSaltToken",
            "label": "erc1155Contract",
            "type": "t_address",
            "src": "../project:/contracts/test/MetaSaltToken.sol:14"
          },
          {
            "contract": "MetaSaltToken",
            "label": "merkleRoot",
            "type": "t_bytes32",
            "src": "../project:/contracts/test/MetaSaltToken.sol:15"
          },
          {
            "contract": "MetaSaltToken",
            "label": "airdropAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/test/MetaSaltToken.sol:16"
          },
          {
            "contract": "MetaSaltToken",
            "label": "airdropVersion",
            "type": "t_uint256",
            "src": "../project:/contracts/test/MetaSaltToken.sol:17"
          },
          {
            "contract": "MetaSaltToken",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/test/MetaSaltToken.sol:18"
          },
          {
            "contract": "MetaSaltToken",
            "label": "airdrops",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../project:/contracts/test/MetaSaltToken.sol:19"
          },
          {
            "contract": "MetaSaltToken",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/MetaSaltToken.sol:102"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "7651515bb7863676e0c3f8fd498e4c886bb7f206249f0a7189c727ea4d62dc48": {
      "address": "0x711fF5E5843efB406FDb1fd8fe0F01beEb254ee8",
      "txHash": "0xb0fd91537c3c0333e1d5bc62e59ff90afbc5d3bfb224bfd98273b46a60158dfc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)3148_storage)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2525_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:92"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "../project:/contracts/test/nfts/ERC721Upgradeable.sol:494"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/test/nfts/ERC721DefaultApproval.sol:7"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721DefaultApproval.sol:23"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ERC1271ValidatorForERC721",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/Mint721Validator.sol:24"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/Mint721Validator.sol:35"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC721Lazy",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyReceiver)6558_storage)",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:25"
          },
          {
            "contract": "ERC721Lazy",
            "label": "metasaltToken",
            "type": "t_address",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:26"
          },
          {
            "contract": "ERC721Lazy",
            "label": "MetasaltTokenCreateRewardValue",
            "type": "t_uint256",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:27"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721Lazy.sol:125"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721Base.sol:26"
          },
          {
            "contract": "ERC721MetaSalt",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/test/nfts/ERC721MetaSalt.sol:25"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyReceiver)6558_storage)": {
            "label": "mapping(uint256 => struct ERC721Lazy.RoyaltyReceiver)"
          },
          "t_struct(RoyaltyReceiver)6558_storage": {
            "label": "struct ERC721Lazy.RoyaltyReceiver",
            "members": [
              {
                "label": "creator",
                "type": "t_address"
              },
              {
                "label": "royaltyPercent",
                "type": "t_uint256"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)3148_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)3148_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2762_storage"
              }
            ]
          },
          "t_struct(Set)2762_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2525_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)2207_storage"
              }
            ]
          },
          "t_struct(Map)2207_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)2199_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)2199_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)2199_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "2651e394fae81370e6493fbb938787da68d79b0728cb67b0a00f2ed9d62c4b13": {
      "address": "0xc34ddB0fDdACEDfE602b4344F6e36393a45D0F9D",
      "txHash": "0x8bf41c7da42786953a0ca48f2d50d176a2b1bd987887a4bccfeda3d305a69507",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:27"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:28"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol:120"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/OrderValidator.sol:45"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "TransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../project:/contracts/TransferManager.sol:20"
          },
          {
            "contract": "TransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../project:/contracts/TransferManager.sol:21"
          },
          {
            "contract": "TransferManager",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../project:/contracts/TransferManager.sol:22"
          },
          {
            "contract": "TransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../project:/contracts/TransferManager.sol:122"
          },
          {
            "contract": "MarketCore",
            "label": "orderState",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../project:/contracts/MarketCore.sol:16"
          },
          {
            "contract": "MarketCore",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../project:/contracts/MarketCore.sol:129"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
